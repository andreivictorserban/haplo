<%
  # Object info is passed in using the :data_for_template parameter
  info = data_for_template
  obj = info[:object]

  # Create presentation string versions of any labels given to the template object, for inclusion in the generated form
  new_labels = []
  obj.labels.each { |l| new_labels << l.to_presentation }

  # Determine restrictions & check with plugins
  edit_behaviour = KEditor.determine_read_only_attributes_and_plugin_object_modifications(@request_user, obj, true, true)
  editor_options = {:read_only_attributes => edit_behaviour.read_only_attributes}

  # Use the KEditor class to build the javascript
  type = obj.first_attr(KConstants::A_TYPE)
  read_only_values = nil
  if info.has_key?(:read_only_attributes)
    editor_options[:read_only_attributes] = (editor_options[:read_only_attributes]||[]) + info[:read_only_attributes]
    # If the template specifies any read only attributes, the values in the template object need to round-trip
    unused_type, read_only_values = KEditor.js_for_obj_attrs(obj, {
      :read_only_attributes => info[:read_only_attributes],
      :invert_read_only_attributes => true
    })
  end
  editor_options.merge!(info[:editor_options] || {})
  editor_js_type, editor_js_attrs = KEditor.js_for_obj_attrs(obj, editor_options)

  # Get basic labelling information
  permission_denied unless @labeller = KEditor.labeller_for(obj, @request_user)

  # Make sure all the necessary client side resources are included
  client_side_resources(:object_editor)
  
  # Options for client side editor
  client_side_options = editor_client_side_options_and_plugins(obj)
-%>

<% in_right_column render :partial => 'edit/editor_labelling' %>

<form method="POST" id="z__keditor_form" action="/do/edit"><%= form_csrf_token %>
<div class="z__editor_buttons">
<input type="submit" name="save" value="<%= @locale.text(:Shared_View_Preview) %>" class="z__editor_buttons_preview"> <input type="submit" name="save" value="<%= @locale.text(:Shared_View_Save) %>" class="z__editor_buttons_save">
</div>

<input type="hidden" name="new" value="<%= type.to_presentation %>">

<% unless new_labels.empty? %>
  <input type="hidden" name="new_labels" value="<%= new_labels.join(',') %>">
<% end %>

<% if info.has_key?(:success_redirect) %><input type="hidden" name="success_redirect" value="<%= h(info[:success_redirect]) %>"><% end %>

</form>

<div id="z__keditor_data" data-type="<%= editor_js_type %>" data-attr="<%= h(JSON.generate(editor_js_attrs)) %>" data-opts="<%= h(JSON.generate(client_side_options)) %>"<% if read_only_values %> data-read-only-values="<%= h(JSON.generate(read_only_values)) %>"<% end %>></div>
