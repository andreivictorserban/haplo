# Haplo Platform                                     http://haplo.org
# (c) Haplo Services Ltd 2006 - 2016    http://www.haplo-services.com
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.


# The application sends a lot of resources to the browser, but a different set for everything.
# This file defines them in terms of resource sets, which are requested by the controllers and templates
# with the client_side_resources() method.
#
# Below:
#   code for ApplicationController
#   javascript file names
#   resource set definitions
#
#
# ------------------------------------------

class ApplicationController

  # Use this method to set the client side resources required from controllers and templates
  def client_side_resources(*resources) # use Symbols
    @client_side_resources ||= Hash.new
    resources.each do |r|
      @client_side_resources[r] = true
      # Recursive includes
      res = CLIENT_SIDE_RESOURCES[r][:resource]
      if res != nil
        res.each do |i|
          client_side_resources(i) unless @client_side_resources[i]
        end
      end
    end
  end

  # Use this method in a plugin to add one of it's resources
  def client_side_plugin_resource(plugin, kind, filename)
    @client_side_resources_plugin ||= Array.new
    path = if filename =~ /\A\//
      # Absolute pathname
      filename
    else
      # Filename only, add path
      "#{plugin.static_files_urlpath}/#{filename}"
    end
    entry = [kind, path]
    unless @client_side_resources_plugin.include?(entry)
      @client_side_resources_plugin << entry
    end
  end

  # Generate the HTML for the script and link tags needed to include all the plugin resources
  def client_side_resources_plugin_html()
    html = ''
    if @client_side_resources_plugin != nil
      @client_side_resources_plugin.each do |kind, pathname|
        if kind == :css
          html << %Q!<link href="#{pathname}" rel="stylesheet" type="text/css">!
        elsif kind == :javascript
          html << %Q!<script src="#{pathname}"></script>!
        end
      end
    end
    html
  end

  # In development mode, add the time to the files -- just use the current time without trying to use the modified time of the underlying file
  if KFRAMEWORK_ENV == 'development'
    alias client_side_plugin_resource_normal client_side_plugin_resource
    def client_side_plugin_resource(plugin, kind, filename)
      client_side_plugin_resource_normal(plugin, kind, "#{filename}?_timenow=#{Time.now.to_i}")
    end
  end

  # The _client_side_resources partial uses this to combine all the resources required
  def client_side_combined_resources
    r = Hash.new
    return r if @client_side_resources == nil
    @client_side_resources.each_key do |res|
      CLIENT_SIDE_RESOURCES[res].each do |k,v|
        if v.class == Array
          # Arrays are combined by joining the contents
          r[k] = (r.has_key?(k)) ? (r[k] + v).uniq : v
        else
          # Just overwrite to combine
          r[k] = v
        end
      end
    end
    r
  end

  # javascript URL
  def client_side_javascript_urlpath(filename)
    mtime = File.stat(File.dirname(__FILE__) + "/../../../static/javascripts/#{filename}.js").mtime.to_i
    %Q!/javascripts/#{filename}.js?#{mtime}!
  end

  # Using the resources generated by client_side_combined_resources, create a list of the required javascript files
  def client_side_javascript_includes_list(resources)
    scripts = Array.new
    # Schema scripts
    if resources[:requires_schema]
      scripts << "/api/schema/js/#{KApp.global(:schema_version)}"
      # The current user ID is included in the URL so that logging in as a different user won't use the cached user
      # schema. While this won't prevent a user from extracting the file from the cache, it does prevent accidental
      # disclosure of data, and behaves as the user would expect.
      scripts << "/api/schema/user/#{KApp.global(:schema_user_version)}/#{@request_user.id}"
    end
    # Normal static scripts
    javascript = resources[:javascript]
    if javascript != nil
      JAVASCRIPTS_IN_ORDER.each do |s|
        if javascript.include?(s)
          # JAVASCRIPT_INC_REPLACEMENT: scripts << "STATIC_DIR/#{DEPLOYMENT_JAVASCRIPT_FILENAME_MAPPING[s]}.js"
          scripts << client_side_javascript_urlpath(s)
          # JAVASCRIPT_INC_REPLACEMENT
        end
      end
    end
    scripts
  end

  def client_side_css_includes_list(resources)
    stylesheets = Array.new
    stylesheet = resources[:stylesheet]
    if stylesheet != nil
      stylesheet.each do |s|
        stylesheets << dynamic_stylesheet_path(s)
      end
    end
    stylesheets
  end

  # REMOVE_ON_PROCESS_BEGIN
    def client_side_controller_js(filename)
      raise "Bad filename" unless filename && filename.kind_of?(String)
      @client_side_resources_plugin ||= Array.new
      @client_side_resources_plugin << [:javascript, "/_dev_ctrl_js/js?t=#{Time.now.to_i}&p=#{render_controller_basename}&f=#{filename}"]
    end
    if false
  # REMOVE_ON_PROCESS_END
      def client_side_controller_js(filename)
        # Deployment version uses digest based filenames
        @client_side_resources_plugin ||= Array.new
        @client_side_resources_plugin << [:javascript, "/-/#{filename}.js"]
      end
  # REMOVE_ON_PROCESS_BEGIN
    end
  # REMOVE_ON_PROCESS_END

end

# All the javascripts are listed here in order of output to get the inclusion order right.
# However actual dependencies should be done in CLIENT_SIDE_RESOURCES.
# If a file is not listed here, it won't be output.
JAVASCRIPTS_IN_ORDER = [
    # Library scripts
    :jqueryui_custom__min,
    # KControls
    :kcontrols, :kdocedit, :ktree, :kdllist, :kdllist_debug, :icon_designer,
    # Components
    :file_upload, :ktray, :ksearch,
    :audio_player, :latest_settings_form, :export_objects,
    :wait_for_download,
    # Object editor
    :keditor,
    # Controller specific scripts
    :klatest, :klatestadm, :help_system,
    :mng_labels,
    # Global UI support
    :impersonate_ui,
    # Plugin adaptor (possibly temporary)
    :plugin_adaptor,
    # oForms client side support
    :oforms_jquery,
    :oforms_changes
  ];

# DEPLOYMENT_JAVASCRIPT_FILENAME_MAPPING_GOES_HERE

# Resources which can be included
#   :resource               - list of other entries which this depends on
#   :javascript             - javascript files
#   :stylesheet             - stylesheet files
#   :send_tray              - true to send the tray contents
#   :requires_schema        - true to send the generated schema js file


CLIENT_SIDE_RESOURCES = {
  # Basic components
  :jquery_ui => {
    :javascript => [:jqueryui_custom__min]
  },
  :jquery_ui_with_css => {
    :stylesheet => [:jqueryui_custom],
    :resource => [:jquery_ui]
  },
  :controls => {
    :javascript => [:kcontrols],
    :stylesheet => [:kcontrols]
  },
  :document_editor => {
    :javascript => [:kdocedit],
    :stylesheet => [:kdocedit],
    :resource => [:controls, :tray],
    :send_tray => true,
    :requires_schema => true # for the subset information only. Doesn't really matter that it's too much, as mainly used in the editor
  },
  :tree => {
    :javascript => [:ktree],
    :stylesheet => [:ktree],
    :resource => [:controls]
  },
  :tray => {
    :javascript => [:ktray]
  },
  :file_upload => {
    :javascript => [:file_upload]
  },
  :file_versions => {
    :stylesheet => [:file_versions],
    :resource => [:file_upload]
  },
  :audio_player => {
    :javascript => [:audio_player],
    :stylesheet => [:audio_player]
  },
  :icon_designer => {
    :javascript => [:icon_designer],
    :stylesheet => [:icon_designer],
    :resource => [:jquery_ui, :controls]
  },

  # Specific controls
  :ctrl_obj_insert_menu => {
    :resource => [:controls, :tray],
    :send_tray => true
  },
  :wait_for_download => {
    :javascript => [:wait_for_download],
    :stylesheet => [:wait_for_download]
  },
  :jquery_ui_slider => {
    :resource => [:jquery_ui_with_css]
  },

  # Editor
  :object_editor => {
    :javascript => [:keditor],
    :stylesheet => [:keditor],
    :resource => [:jquery_ui, :file_upload, :tray, :tree, :document_editor],
    :requires_schema => true
  },

  # Search
  :search => {
    :javascript => [:ksearch]
  },
  :search_subject => {
    :javascript => [:kdllist, :ktray, :ksearch],
    :resource => [:tree],
    :send_tray => true
  },
  :search_results => {
    :javascript => [:ktray, :ksearch],
    :send_tray => true
  },
  :search_results_demand => {
    :javascript => [:kdllist] # NOTE: In development environment the debugging JS gets added
  },

  # Controller specific
  :latest_user_admin => {
    :javascript => [:klatest, :klatestadm],
    :stylesheet => [:latest]
  },
  :latest_styles => { # for user stuff, not admin
    :stylesheet => [:latest]
  },
  :latest_user => {
    :javascript => [:klatest]
  },
  :recent => {
    :stylesheet => [:recent]
  },
  :help_system => {
    :javascript => [:help_system]
  },
  :latest_settings_form => {
    :javascript => [:latest_settings_form]
  },
  :export_objects => {
    :javascript => [:export_objects]
  },

  # Global UI support
  :impersonate_ui => {
    :javascript => [:impersonate_ui],
    :stylesheet => [:impersonate_ui]
  },

  # Plugin adaptor (possibly temporary)
  :plugin_adaptor => {
    :javascript => [:plugin_adaptor]
  },

  # oForms client side resources
  :oforms_styles => {
    :stylesheet => [:oforms]
  },
  :oforms_support => {
    :javascript => [:oforms_jquery]
  },
  :oforms_file_support => {
    :resource => [:oforms_support],
    :javascript => [:file_upload]
  },
  :oforms_changes => {
    :javascript => [:oforms_changes]
  },

  # Management UI
  :management => {
    :stylesheet => [:management]
  },
  :basics => {
    :javascript => [:dummy_val_to_trigger_core_lib_inclusion]
  },
  :mng_labels => {
    :resource => [:controls, :ctrl_obj_insert_menu],
    :javascript => [:mng_labels]
  }
}

if KFRAMEWORK_ENV == 'development'
  # Add debugging javascript to search
  CLIENT_SIDE_RESOURCES[:search_results_demand][:javascript] << :kdllist_debug
end


