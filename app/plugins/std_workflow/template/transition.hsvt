
std:plugin:resources("w.css")

unless(isBypassTransition) {
  if(usingStepsUI) {
    std:workflow:transition-steps:navigation(M "std:workflow:final-confirm-step")
  }
}

unless(transition) {

  template:std:ui:choose()

} else {

  <form method="POST"> std:form:token()
    <input type="hidden" name="transition" value=transition>
    if(requestedTarget) { <input type="hidden" name="target" value=requestedTarget> }

    each(aboveConfirmFormDeferreds) { render(.) }

    if(NEW_TRANSITION_UI) {
      <div class="z__workflow_choosen_transition_container">
        do() {
          within(transitionProperties) {
            template:std:ui:choose:selected-item() { yield:confirm-ui() }
          }
        } confirm-ui {
          <div class="z__workflow_confirm_container">
            <a href=backLink role="button"> i("Cancel") </a> " " <input type="submit" value=[i("Confirm:") " " transitionProperties.label]>
          </div>
        }
      </div>
    }

    if(NEW_TRANSITION_UI) {

      // Top and bottom form deferreds are a concept from the old UI, but treated the same in the new UI
      each(topFormDeferreds) {
        <div class="z__workflow_confirm_deferred_holder">
          render(.)
        </div>
      }
      each(bottomFormDeferreds) {
        <div class="z__workflow_confirm_deferred_holder">
          render(.)
        </div>
      }

    } else {

      each(topFormDeferreds) { render(.) }

      if(transitionProperties.confirmText) {
        std:text:paragraph(transitionProperties.confirmText)
      }
      <p> <input type="submit" value=[i("Confirm:") " " transitionProperties.label]> " &nbsp; &nbsp; " <a href=backLink role="button"> i("Cancel") </a> </p>

      each(bottomFormDeferreds) { render(.) }
    }

  </form>
}
