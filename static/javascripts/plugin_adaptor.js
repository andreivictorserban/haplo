/*global KApp,escapeHTML,KTree,KTreeSource,KCtrlDropdownMenu,KEditor,KEditorSchema,KControl */

/* Haplo Platform                                     http://haplo.org
 * (c) Haplo Services Ltd 2006 - 2016    http://www.haplo-services.com
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.         */


/* Adaptor code to allow external plugins some access to the client side JavaScript */

var Haplo = {};

// TODO: Remove backwards compatibility name in client side plugin adaptor
var ONEIS = Haplo;

(function($) {
    var root = this;

    // Interface to KApp functions
    Haplo.ui = {};
    Haplo.ui.openCovering = function() { KApp.j__openCovering.apply(KApp, arguments); };
    Haplo.ui.closeCovering = function() { KApp.j__closeCovering(); };

    Haplo.control = {};

    Haplo.html = {
        spinner: KApp.p__spinnerHtml
    };

    // Utility functions
    var wrapDelegateFunction = function(delegate, wrapper, internal, external) {
        if(undefined !== delegate[external]) {
            wrapper[internal] = function() { delegate[external].apply(delegate, arguments); };
        }
    };

    // Set up alias of basic control functions
    var setupBasicControlAliases = function(proto) {
        proto.generateHTML = proto.j__generateHtml;
        proto.attachHandlers = proto.j__attach;
        proto.getValue = proto.j__value;
    };

    // KTree
    if(undefined !== root.KTree) {

        var wrapTreeDelegate = function(delegate) {
            var wrapper = {};
            wrapDelegateFunction(delegate, wrapper, 'j__treeSelectionChange', 'treeSelectionChange');
            wrapDelegateFunction(delegate, wrapper, 'j__treeAllowSelectionChange', 'treeAllowSelectionChange');
            wrapDelegateFunction(delegate, wrapper, 'j__treeActionsBarHeight', 'treeActionsBarHeight');
            wrapDelegateFunction(delegate, wrapper, 'j__treeHtmlForActionsBarElement', 'treeHTMLForActionsBarElement');
            return wrapper;
        };

        // Generage aliases of functions
        var p = KTree.prototype;
        setupBasicControlAliases(p);
        p.setSelection = p.j__setSelection;
        p.displayNameOf = p.j__displayNameOf;
        p.typeOf = p.j__typeOf;
        p.setTypeFilter = p.j__setTypeFilter;
        p.refAtSelectionLevel = p.j__refAtSelectionLevel;
        p.prepareForRemoval = p.j__prepareForRemoval;
        p.resetToRoot = p.j__resetToRoot;

        // Wrapped constructor setting
        KTree.prototype.changeDelegate = function(delegate) { this.j__changeDelegate(wrapTreeDelegate(delegate)); };

        // Constructor function
        Haplo.control.tree = function(delegate, options) {
            var treeOptions = {};
            if(options) {
                if(options.small) { treeOptions.p__size = KTREE_SMALL; }
                if(options.disableSearch) { treeOptions.p__disableSearch = true; }
                if(options.searchRoots) { treeOptions.p__searchRoots = options.searchRoots; }
            }
            return new KTree(KTreeSource.j__fromDOM(), wrapTreeDelegate(delegate), treeOptions);
        };
    }

    // Drop down menu control
    if(undefined !== root.KCtrlDropdownMenu) {
        setupBasicControlAliases(KCtrlDropdownMenu.prototype);
        Haplo.control.dropdown = function(caption, delegate) {
            return new KCtrlDropdownMenu(
                /* get contents */ function() {
                    var html = '';
                    var contents = delegate.getMenuContents();
                    if(contents.length === 0) {
                        html += '<div class="z__dropdown_menu_entry_title">(empty)</div>';
                    } else {
                        _.each(contents, function(item) {
                            html += '<a href="#">'+escapeHTML(item)+'</a>';
                        });
                    }
                    return html;
                },
                /* selection callback */ function(a, index) {
                    delegate.onItemSelected(index);
                },
                caption
            );
        };
    }

    // KEditor plugins
    if(undefined !== root.KEditor) {

        Haplo.editor = {};

        // Option translation
        var ATTR_CONTAINER_OPTIONS = [
            ['singleValue', 'p__singleValue'],
            ['defaultEmptyValue', 'p__defaultEmptyValue']
        ];

        // Editor object public functions
        var e = KEditor.prototype;
        e.setTitle = e.j__setTitle;
        e.getTitle = e.j__getTitle;
        e.getEncodedObjectData = e.j__value;
        // Add attributes based on JSON data from the server generated by O.editor.encode()
        e.addAttributes = function(data) {
            // If necessary, JSON decode the data passed in
            if(typeof(data) === 'string') {
                data = $.parseJSON(data);
            }
            // Add the attributes
            if(!_.isArray(data.v2)) {
                return false;
            }
            var editor = this; // scoping
            _.each(data.v2, function(x) {
                var desc = x[0];
                var attrs = x[1];
                if(desc != A_TYPE && attrs.length > 0) {
                    var container = editor.j__getAttrContainer(desc);
                    if(container) {
                        _.each(attrs, function(a) {
                            container.j__addNewValue(a[0], a);
                        });
                    }
                }
            });
            return true;
        };
        // Add an object reference attribute
        e.addLink = function(ref, title, desc, qual) {
            var container = this.j__getAttrContainer(desc);
            if(container) {
                container.j__addNewValue(T_OBJREF, [T_OBJREF, qual || Q_NULL, ref, title]);
            }
        };
        e.cleanupFocusedValue = function() {
            this.j__cleanupFocusedValue();
        };

        // Attribute container public functions
        var c = KEditor.p__KAttrContainer.prototype;
        c.addUI = function(html, options) {
            options = (options || {});
            var h = '<div style="text-align:right" class="z__keyvalue_row z__attr_container_plugin_ui';
            // Additional class required to get right insertation point for new elements if the HTML goes at the bottom.
            if(options.append) { h += ' z__attr_container_plugin_ui_bottom'; }
            this[options.append ? 'p__bottom_html' : 'p__top_html'] += h+'">'+html+'</div>';
        };
        c.getDescriptor = function() { return this.q__desc; };
        c.setOptions = function(options) {
            var container = this;
            _.each(ATTR_CONTAINER_OPTIONS, function(o) {
                if(o[0] in options) {
                    container[o[1]] = options[o[0]];
                }
            });
        };
        c.getContainerDOMElement = function() { return this.q__domObj; };
        c.getContainerChoosesQualifier = function() { return this.q__defn.p__chooseQualifier; };

        // Plugin delegate registration function
        Haplo.editor.registerDelegate = function(name, constructor) {
            KEditor.p__delegate_constructors[name] = function(editor, data) {
                var wrapper = {};
                var delegate = constructor(editor, data);
                if(!delegate) { return undefined; }
                wrapDelegateFunction(delegate, wrapper, 'j__setupAttribute', 'setupAttribute');
                wrapDelegateFunction(delegate, wrapper, 'j__startEditor', 'startEditor');
                wrapDelegateFunction(delegate, wrapper, 'j__onTypeChange', 'onTypeChange');
                return wrapper;
            };
        };

        // Ref lookup redirection registration
        Haplo.editor.registerRefLookupRedirector = function(fn) {
            KEditor.p__refLookupRedirectorFunctions.push(fn);
        };

        // Wrapped editor lookup control
        var RefLookupControl = KEditor.p__KEdObjRef;
        setupBasicControlAliases(RefLookupControl.prototype);
        Haplo.editor.createRefLookupControl = function(parent, desc, listener, ref, title) {
            var control = new RefLookupControl(ref);
            if(ref && title) {
                control.p__objectTitle = title;
                KApp.j__setObjectTitle(ref, title);
            }
            control.p__keditorValueControl = {
                q__defn: KEditorSchema.j__attrDefn(desc),
                p__parentContainer: parent.q__adaptor_editorValueControl.q__keditorPluginDefinedTextValueObject.p__keditorValueControl.p__parentContainer,
                j__getExtrasContainer: function() { return parent.q__adaptor_editorValueControl.q__keditorPluginDefinedTextValueObject.p__keditorValueControl.j__getExtrasContainer(); }
            };
            if(listener) {
                control.p__notifySelectionListener = function(ref, title) {
                    var i = parent.q__adaptor_editorValueControl.q__keditorPluginDefinedTextValueObject.q__domId;
                    listener($('#'+i), ref, title);
                };
            }
            return control;
        };

        // Information
        Haplo.editor.schema = {
            unaliasedAttribute: function(desc) {
                var defn = KEditorSchema.j__attrDefn(desc);
                if(defn && defn.p__aliasOf) {
                    return defn.p__aliasOf;
                }
                return desc;
            }
        };

        // Plugin defined text type editing registration function
        Haplo.editor.registerTextType = function(type, constructor) {
            KEditor.p__pluginTextTypeValueConstructor[type] = function(value, desc) {
                var pluginControl = constructor(value, desc);
                var editorValueControl = new EditorTextValueUI(pluginControl);
                pluginControl.q__adaptor_editorValueControl = editorValueControl;
                return editorValueControl;
            };
        };
        var EditorTextValueUI = function(pluginInterface) {
            this.q__pluginInterface = pluginInterface;
        };
        _.extend(EditorTextValueUI.prototype, {
            j__generateHtml2: function(i) {
                return '<div id="'+i+'">'+this.q__pluginInterface.generateHTML()+'</div>';
            },
            j__attach2: function(i) {
                return this.q__pluginInterface.attach($('#'+i));
            },
            j__getValue: function(i) {
                return this.q__pluginInterface.getValue($('#'+i));
            },
            j__validate: function() {
                if("validate" in this.q__pluginInterface) {
                    return this.q__pluginInterface.validate();
                }
                return null;
            },
            j__undoableDeletedText: function(i) {
                var container = $('#'+i);
                if(this.q__pluginInterface.undoableDeletedText) {
                    return this.q__pluginInterface.undoableDeletedText(container);
                } else {
                    return container.text();
                }
            }
        });
    }

})(jQuery);
