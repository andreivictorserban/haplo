/* Haplo Platform                                    https://haplo.org
 * (c) Haplo Services Ltd 2006 - 2017   https://www.haplo-services.com
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.         */

package org.haplo.jsinterface.util;

import org.haplo.javascript.Runtime;
import org.haplo.jsinterface.KScriptable;
import org.haplo.javascript.OAPIException;

import org.mozilla.javascript.Scriptable;

import java.math.BigDecimal;
import java.text.DecimalFormat;

public class JsBigDecimal extends KScriptable {
    BigDecimal bigDecimal;

    public JsBigDecimal() {
    }

    public void jsConstructor(Object number) {
        if((number != null) && !(number instanceof org.mozilla.javascript.Undefined)) {
            if(number instanceof Number) {
                if(number instanceof Float || number instanceof Double) {
                    this.bigDecimal = new BigDecimal(((Number)number).doubleValue());
                } else {
                    this.bigDecimal = new BigDecimal(((Number)number).longValue());
                }
            } else if(number instanceof CharSequence) {
                this.bigDecimal = new BigDecimal(number.toString());
            } else {
                throw new OAPIException("BigDecimals must be constructed with a number or a string representation of a BigDecimal");
                
            }
        }
    }

    public String getClassName() {
        return "$BigDecimal";
    }

    protected String getConsoleData() {
        return (this.bigDecimal == null) ? "null" : this.bigDecimal.toPlainString();
    }

    // ----------------------------------------------------------------------

    static public JsBigDecimal fromBigDecimal(BigDecimal bigDecimal) {
        JsBigDecimal d = (JsBigDecimal)Runtime.createHostObjectInCurrentRuntime("$BigDecimal");
        d.setBigDecimal(bigDecimal);
        return d;
    }

    private void setBigDecimal(BigDecimal bigDecimal) {
        this.bigDecimal = bigDecimal;
    }

    public BigDecimal toBigDecimal() {
        return this.bigDecimal;
    }

    // ----------------------------------------------------------------------

    public String jsFunction_toString() {
        return this.bigDecimal.toPlainString();
    }

    public String jsFunction_format(String format) {
        DecimalFormat df = new DecimalFormat(format);
        return df.format(this.bigDecimal);
    }

    public double jsFunction_toDouble() {
        return this.bigDecimal.doubleValue();
    }

    public double jsFunction_toFloat() {
        return jsFunction_toDouble();
    }

    // ----------------------------------------------------------------------

    public int jsFunction_compareTo(Object a) { return this.bigDecimal.compareTo(d(a)); }
    public boolean jsFunction_equals(Object a) { return this.bigDecimal.equals(d(a)); }

    public JsBigDecimal jsFunction_setScaleWithRounding(Object newScale) { return r(this.bigDecimal.setScale(i(newScale), BigDecimal.ROUND_HALF_UP)); }

    // These functions generated by script bigdecimal_interface.rb
    public JsBigDecimal jsFunction_abs() { return r(this.bigDecimal.abs()); }
    public JsBigDecimal jsFunction_negate() { return r(this.bigDecimal.negate()); }
    public JsBigDecimal jsFunction_plus() { return r(this.bigDecimal.plus()); }
    public JsBigDecimal jsFunction_stripTrailingZeros() { return r(this.bigDecimal.stripTrailingZeros()); }
    public JsBigDecimal jsFunction_ulp() { return r(this.bigDecimal.ulp()); }

    public int jsFunction_precision() { return this.bigDecimal.precision(); }
    public int jsFunction_scale() { return this.bigDecimal.scale(); }
    public int jsFunction_signum() { return this.bigDecimal.signum(); }

    public JsBigDecimal jsFunction_add(Object augend) { return r(this.bigDecimal.add(d(augend))); }
    public JsBigDecimal jsFunction_divide(Object divisor) { return r(this.bigDecimal.divide(d(divisor))); }
    public JsBigDecimal jsFunction_divideToIntegralValue(Object divisor) { return r(this.bigDecimal.divideToIntegralValue(d(divisor))); }
    public JsBigDecimal jsFunction_max(Object val) { return r(this.bigDecimal.max(d(val))); }
    public JsBigDecimal jsFunction_min(Object val) { return r(this.bigDecimal.min(d(val))); }
    public JsBigDecimal jsFunction_multiply(Object multiplicand) { return r(this.bigDecimal.multiply(d(multiplicand))); }
    public JsBigDecimal jsFunction_remainder(Object divisor) { return r(this.bigDecimal.remainder(d(divisor))); }
    public JsBigDecimal jsFunction_subtract(Object subtrahend) { return r(this.bigDecimal.subtract(d(subtrahend))); }

    public JsBigDecimal jsFunction_movePointLeft(Object n) { return r(this.bigDecimal.movePointLeft(i(n))); }
    public JsBigDecimal jsFunction_movePointRight(Object n) { return r(this.bigDecimal.movePointRight(i(n))); }
    public JsBigDecimal jsFunction_pow(Object n) { return r(this.bigDecimal.pow(i(n))); }
    public JsBigDecimal jsFunction_scaleByPowerOfTen(Object n) { return r(this.bigDecimal.scaleByPowerOfTen(i(n))); }
    public JsBigDecimal jsFunction_setScale(Object newScale) { return r(this.bigDecimal.setScale(i(newScale))); }

    // ----------------------------------------------------------------------

    private static JsBigDecimal r(BigDecimal bigDecimal) {
        return JsBigDecimal.fromBigDecimal(bigDecimal);
    }

    private static int i(Object value) {
        if(!(value instanceof Number)) {
            throw new OAPIException("argument must be a number");
        }
        return ((Number)value).intValue();
    }

    private static BigDecimal d(Object value) {
        if(!(value instanceof JsBigDecimal)) {
            throw new OAPIException("argument must be a BigDecimal");
        }
        return ((JsBigDecimal)value).toBigDecimal();
    }

}
